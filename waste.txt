/* General Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Arial', sans-serif;
}

/* Body and Overall Container */
body {
    background-color:#f4f4f4 ;
    color: #333;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    overflow: hidden; /* Prevent scrolling when popup is active */
}

/* Popup Overlay (Background) */
.overlay {
    display: none; /* Hidden by default */
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #f4f4f4; /* Semi-transparent black background */
    z-index: 1000;
    justify-content: center;
    align-items: center;
}

/* Popup Modal */
.popup {
    background-color: #ffffff;
    border-radius: 8px;
    padding: 25px;
    width: 320px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    text-align: center;
    position: relative;
    z-index: 1010; /* Ensure popup is above the overlay */
}

/* Title of the Popup */
.popup h2 {
    font-size: 20px;
    color: #1e7bb5;  /* Updated to blue */
    margin-bottom: 20px;
}

/* Input Field */
.popup input[type="text"] {
    width: 100%;
    padding: 12px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 5px;
    margin-bottom: 15px;
    outline: none;
    transition: border-color 0.3s ease;
}

.popup input[type="text"]:focus {
    border-color: #1e7bb5;  /* Blue border on focus */
}

/* Submit Button */
.popup button {
    width: 100%;
    padding: 12px;
    background-color: #1e7bb5;  /* Blue button */
    color: #fff;
    border: none;
    border-radius: 5px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s;
}

.popup button:hover {
    background-color: #0f5a7b;  /* Darker blue on hover */
}

/* Close Button */
.popup .close-btn {
    position: absolute;
    top: 8px;
    right: 8px;
    background-color: #ddd;
    color: #333;
    border: none;
    border-radius: 50%;
    width: 28px;
    height: 28px;
    font-size: 16px;
    cursor: pointer;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 0.3s ease;
}

/* Close Button Hover Effect */
.popup .close-btn:hover {
    background-color: #bbb;
}

/* Main Chat Interface */
.container {
    width: 100%;
    max-width: 600px;
    background-color: #fff;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    height: 90vh;
}

/* Heading */
h1 {
    text-align: center;
    font-size: 26px;
    color: #1e7bb5;  /* Updated to blue */
    margin-bottom: 20px;
}

/* Chat Box Container */
.chat-box {
    flex-grow: 1;
    max-height: 450px;
    overflow-y: auto;
    margin-bottom: 20px;
    padding: 15px;
    background-color: #f9f9f9;
    border-radius: 8px;
    border: 1px solid #ddd;
}

/* Message Styling */
.message {
    margin: 10px 0;
    padding: 12px;
    border-radius: 12px;
    font-size: 15px;
    word-wrap: break-word;
}

/* System Message Styling */
.message.system {
    background-color: #e9ecef;
    color: #6c757d;
    font-style: italic;
    text-align: center;
}

/* User Message Styling */
.message.user {
    background-color: #007bff;
    color: white;
    max-width: 80%;
    margin-left: 20px;
    text-align: left;
}

/* Input Field */
.message-input {
    padding: 12px;
    border: 1px solid #ccc;
    border-radius: 20px;
    margin-bottom: 10px;
    font-size: 16px;
    width: calc(100% - 120px);
    box-sizing: border-box;
}

.message-input:focus {
    border-color: #007bff;
    outline: none;
}

/* Action Buttons */
.action-buttons {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/* Send and Leave Button Styling */
.send-button, .leave-button {
    padding: 12px 20px;
    border-radius: 30px;
    font-size: 16px;
    color: #fff;
    background-color: #007bff;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s;
}

.send-button:hover, .leave-button:hover {
    background-color: #0056b3;
}

/* Leave Button Styling */
.leave-button {
    background-color: #dc3545;
}

.leave-button:hover {
    background-color: #c82333;
}


------------------------------------------------------
from flask import Flask, render_template, request, jsonify, redirect, url_for
from flask_socketio import SocketIO, join_room, leave_room, emit
import qrcode
import os
import random
import string

app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key'
socketio = SocketIO(app)

# Sample data for genres and projects
genres = ["Drama", "Thriller", "Comedy", "Fantasy", "Sci-Fi", "Romance"]
projects = [
    {"title": "Project Title 1", "genre": "Drama", "description": "An emotional journey through..."},
    {"title": "Project Title 2", "genre": "Comedy", "description": "A humorous take on modern life..."},
    # Add more sample projects as needed
]

# Directory for saving QR codes
if not os.path.exists("static/qr_codes"):
    os.makedirs("static/qr_codes")

# Home route
@app.route("/")
def home():
    return render_template("index.html", genres=genres, projects=projects)

# Search API for filtering projects
@app.route("/search", methods=["POST"])
def search():
    query = request.json.get("query", "").lower()
    filtered_projects = [proj for proj in projects if query in proj["title"].lower() or query in proj["description"].lower()]
    return jsonify(filtered_projects)

# Room creation route
@app.route("/create-room", methods=["POST"])
def create_room():
    genre = request.form.get("genre")
    room_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    room_url = url_for("join_room_page", room_code=room_code, _external=True)

    # Generate QR code for the room
    qr = qrcode.make(room_url)
    qr_filename = f"static/qr_codes/{room_code}.png"
    qr.save(qr_filename)

    return render_template("room.html", genre=genre, room_code=room_code, room_url=room_url, qr_code=qr_filename)

# Room joining route
@app.route("/room/<room_code>")
def join_room_page(room_code):
    return render_template("collaboration.html", room_code=room_code)

# WebSocket events for real-time interaction
# WebSocket events for chat
@socketio.on("join")
def handle_join(data):
    username = data["username"]
    room_code = data["room"]
    join_room(room_code)
    emit("message", {"username": "System", "message": f"{username} has joined the room."}, room=room_code)

@socketio.on("message")
def handle_message(data):
    room_code = data["room"]
    emit("message", data, room=room_code)

@socketio.on("leave")
def handle_leave(data):
    username = data["username"]
    room_code = data["room"]
    leave_room(room_code)
    emit("message", {"username": "System", "message": f"{username} has left the room."}, room=room_code)


@socketio.on("file_upload")
def handle_file_upload(data):
    room_code = data["room"]
    file_url = data["file_url"]
    emit("file_message", {"username": data["username"], "file_url": file_url}, room=room_code)

@socketio.on("typing")
def handle_typing(data):
    room_code = data["room"]
    emit("typing", {"username": data["username"], "is_typing": data["is_typing"]}, room=room_code)
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'jpg', 'jpeg', 'png', 'gif', 'pdf', 'txt'}

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    if file and allowed_file(file.filename):
        filename = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        file.save(filename)
        return jsonify({"message": "File uploaded successfully!"}), 200
    return jsonify({"error": "File not allowed"}), 400


if __name__ == "__main__":
    socketio.run(app, debug=True)
----------------------------------------
from flask import Flask, render_template, request, jsonify, redirect, url_for
from flask_socketio import SocketIO, join_room, leave_room, emit
from werkzeug.exceptions import RequestEntityTooLarge
import qrcode
import os
import random
import string
import sqlite3

# Flask setup
app = Flask(__name__)
app.config['SECRET_KEY'] = 'your-secret-key'
socketio = SocketIO(app)

# Allowed file types and upload directory
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'jpg', 'jpeg', 'png', 'gif', 'pdf', 'txt', 'doc', 'docx'}
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 100MB limit

app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
@app.errorhandler(RequestEntityTooLarge)
def handle_file_size_error(error):
    return jsonify({"error": "File is too large. Maximum allowed size is 100MB."}), 413

# Ensure the uploads directory exists
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# Ensure the QR code directory exists
if not os.path.exists("static/qr_codes"):
    os.makedirs("static/qr_codes")

# Sample data for genres and projects
genres = ["Drama", "Thriller", "Comedy", "Fantasy", "Sci-Fi", "Romance"]
projects = [
    {"title": "Project Title 1", "genre": "Drama", "description": "An emotional journey through..."},
    {"title": "Project Title 2", "genre": "Comedy", "description": "A humorous take on modern life..."},
]

# SQLite database setup
def init_db():
    with sqlite3.connect("data.db") as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS uploads (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                filename TEXT NOT NULL,
                file_url TEXT NOT NULL,
                username TEXT NOT NULL,
                room_code TEXT NOT NULL
            )
        """)
        conn.commit()

init_db()

# Home route
@app.route("/")
def home():
    return render_template("index.html", genres=genres, projects=projects)

# Search API for filtering projects
@app.route("/search", methods=["POST"])
def search():
    query = request.json.get("query", "").lower()
    filtered_projects = [proj for proj in projects if query in proj["title"].lower() or query in proj["description"].lower()]
    return jsonify(filtered_projects)

# Room creation route
@app.route("/create-room", methods=["POST"])
def create_room():
    genre = request.form.get("genre")
    room_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    room_url = url_for("join_room_page", room_code=room_code, _external=True)

    # Generate QR code for the room
    qr = qrcode.make(room_url)
    qr_filename = f"static/qr_codes/{room_code}.png"
    qr.save(qr_filename)

    return render_template("room.html", genre=genre, room_code=room_code, room_url=room_url, qr_code=qr_filename)

# Room joining route
@app.route("/room/<room_code>")
def join_room_page(room_code):
    return render_template("collaboration.html", room_code=room_code)

# WebSocket events for real-time interaction
@socketio.on("join")
def handle_join(data):
    username = data["username"]
    room_code = data["room"]
    join_room(room_code)
    emit("message", {"username": "System", "message": f"{username} has joined the room."}, room=room_code)

@socketio.on("message")
def handle_message(data):
    room_code = data["room"]
    emit("message", data, room=room_code)

@socketio.on("leave")
def handle_leave(data):
    username = data["username"]
    room_code = data["room"]
    leave_room(room_code)
    emit("message", {"username": "System", "message": f"{username} has left the room."}, room=room_code)

@socketio.on("file_upload")
def handle_file_upload(data):
    room_code = data["room"]
    username = data["username"]
    file_url = data["file_url"]

    # Broadcast file upload to the room
    emit("file_message", {"username": username, "file_url": file_url}, room=room_code)

    # Save file metadata to the database
    with sqlite3.connect("data.db") as conn:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO uploads (filename, file_url, username, room_code)
            VALUES (?, ?, ?, ?)
        """, (file_url.split('/')[-1], file_url, username, room_code))
        conn.commit()

@socketio.on("typing")
def handle_typing(data):
    room_code = data["room"]
    emit("typing", {"username": data["username"], "is_typing": data["is_typing"]}, room=room_code)

# Helper function to check allowed file types
def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

# File upload route
# File upload route
@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400
    file = request.files['file']
    username = request.form.get('username')
    room_code = request.form.get('room_code')

    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400
    if file and allowed_file(file.filename):
        filename = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
        
        # Emit a system message notifying the upload
        socketio.emit("message", {
            "username": "System",
            "message": f"{username} is uploading a file: {file.filename}"
        }, room=room_code)

        file.save(filename)

        file_url = f"/{UPLOAD_FOLDER}/{file.filename}"

        # Notify users in the room about the uploaded file
        socketio.emit("file_message", {"username": username, "file_url": file_url}, room=room_code)

        # Save file metadata to the database
        with sqlite3.connect("data.db") as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO uploads (filename, file_url, username, room_code)
                VALUES (?, ?, ?, ?)
            """, (file.filename, file_url, username, room_code))
            conn.commit()

        return jsonify({"message": "File uploaded successfully!", "file_url": file_url}), 200

    return jsonify({"error": "File not allowed"}), 400


if __name__ == "__main__":
    socketio.run(app, debug=True)
--------------------------------------------------
/* General body and layout styles */
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #f4f4f9;
    height: 100vh;
    flex-direction: column;
    overflow: hidden;
}

h1 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}

/* Chat container styles */
.container {
    width: 90%;
    max-width: 600px;
    padding: 20px;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
    height: 80vh;
}

/* Popup for username input */
.overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10;
}

.popup {
    background-color: #fff;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    width: 90%;
    max-width: 400px;
    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
}

.popup input {
    padding: 10px;
    width: 80%;
    margin-bottom: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
}

.popup button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    background-color: #3f85f8;
    color: #fff;
    cursor: pointer;
    font-size: 16px;
}


/* Chat bubbles */
.chat-box {
    overflow-y: auto;
    flex-grow: 1;
    margin-bottom: 20px;
}

.chat-bubble {
    margin-bottom: 10px;
    padding: 10px;
    border-radius: 8px;
    max-width: 80%;
}

.chat-bubble.sent {
    background-color: #f1f1f1;
    align-self: flex-end;
}

.chat-bubble.received {
    background-color: #e2f7d9;
    align-self: flex-start;
}

.message-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.message-input {
    width: 70%;
    padding: 10px;
    border-radius: 8px;
    border: 1px solid #ccc;
}

.file-upload {
    display: none;
}

.file-upload-label {
    cursor: pointer;
    font-size: 20px;
    margin-right: 10px;
}

.send-button {
    padding: 10px 20px;
    background-color: #3f85f8;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.controls {
    display: flex;
    justify-content: space-between;
}

.history-button, .leave-button {
    background-color: #f4f4f9;
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    cursor: pointer;
}

.history-button:hover, .leave-button:hover {
    background-color: #e2f7d9;
}

/* Hide chat history initially */
.chat-history.hidden {
    display: none;
}
